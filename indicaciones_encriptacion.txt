Para implementar la funcionalidad de encriptar y desencriptar el contenido del área de texto antes de guardarlo en un archivo y leerlo nuevamente al reiniciar el servidor, puedes seguir estos pasos:

1. Modificar la clase `encriptacion` para que tenga métodos adicionales para guardar y cargar mensajes encriptados desde un archivo:

```java
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.List;

public class Encriptacion {

    private static SecretKey generateSecretKey() throws Exception {
        String keyString = "your_secret_key";
        byte[] keyBytes = Arrays.copyOf(keyString.getBytes(StandardCharsets.UTF_8), 16);
        return new SecretKeySpec(keyBytes, "AES");
    }

    public static String encrypt(String message) {
        try {
            SecretKey secretKey = generateSecretKey();
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(message.getBytes(StandardCharsets.UTF_8));
            return Base64.getEncoder().encodeToString(encryptedBytes);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static String decrypt(String encryptedMessage) {
        try {
            SecretKey secretKey = generateSecretKey();
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            byte[] decodedBytes = Base64.getDecoder().decode(encryptedMessage);
            byte[] decryptedBytes = cipher.doFinal(decodedBytes);
            return new String(decryptedBytes, StandardCharsets.UTF_8);
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    public static void saveToFile(String content, String fileName) {
        try {
            String encryptedContent = encrypt(content);
            Path path = Paths.get(fileName);
            Files.write(path, encryptedContent.getBytes());
            System.out.println("Mensaje encriptado guardado en el archivo: " + fileName);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String loadFromFile(String fileName) {
        try {
            Path path = Paths.get(fileName);
            List<String> lines = Files.readAllLines(path);
            if (!lines.isEmpty()) {
                String encryptedContent = lines.get(0);
                return decrypt(encryptedContent);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
```

2. Modificar la clase `MarcoServidor` para utilizar estos métodos al guardar y cargar mensajes:

```java
// ...

class MarcoServidor extends JFrame implements Runnable {

    private static final String FILE_NAME = "mensajes_encriptados.txt";

    // ...

    private void guardarMensajeEncriptado(String mensaje) {
        Encriptacion.saveToFile(mensaje, FILE_NAME);
    }

    private String cargarMensajesEncriptados() {
        return Encriptacion.loadFromFile(FILE_NAME);
    }

    // ...

    @Override
    public void run() {
        try {
            // ...

            while (true) {
                // ...

                if (!mensaje.equals(" online")) {
                    areatexto.append("\n" + nick + ": " + mensaje + " para " + ip);
                    guardarMensajeEncriptado(areatexto.getText());

                    // ...
                } else {
                    // ...

                    // Cargar mensajes encriptados al reiniciar el servidor
                    String mensajesEncriptados = cargarMensajesEncriptados();
                    if (mensajesEncriptados != null) {
                        areatexto.setText(mensajesEncriptados);
                    }

                    // ...
                }
            }

            // ...
        } catch (IOException | ClassNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }

    // ...
}
```

Estos cambios permitirán encriptar y desencriptar el contenido del área de texto antes de guardarlo en el archivo y cargarlo nuevamente al reiniciar el servidor. Asegúrate de manejar adecuadamente las excepciones y adaptar el código según tus necesidades específicas.